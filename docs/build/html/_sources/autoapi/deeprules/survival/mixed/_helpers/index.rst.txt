deeprules.survival.mixed._helpers
=================================

.. py:module:: deeprules.survival.mixed._helpers


Classes
-------

.. autoapisummary::

   deeprules.survival.mixed._helpers.RuleChoice
   deeprules.survival.mixed._helpers.RuleChoices
   deeprules.survival.mixed._helpers.RuleSetGrowingContext
   deeprules.survival.mixed._helpers.RuleSetGrowingResult
   deeprules.survival.mixed._helpers.RuleSetGrowingResults
   deeprules.survival.mixed._helpers.RuleSetGrower


Functions
---------

.. autoapisummary::

   deeprules.survival.mixed._helpers._calculate_rules_coverages
   deeprules.survival.mixed._helpers._update_ruleset


Module Contents
---------------

.. py:class:: RuleChoice

   .. py:attribute:: type
      :type:  str


   .. py:attribute:: rule
      :type:  Optional[decision_rules.survival.SurvivalRule]


   .. py:attribute:: pred_quality
      :type:  float


.. py:class:: RuleChoices

   .. py:attribute:: dnf
      :type:  RuleChoice


   .. py:attribute:: cnf
      :type:  RuleChoice


.. py:class:: RuleSetGrowingContext

   .. py:attribute:: params
      :type:  deeprules.survival.mixed._params.AlgorithmParams


   .. py:attribute:: X
      :type:  pandas.DataFrame


   .. py:attribute:: y
      :type:  pandas.Series


   .. py:attribute:: X_np
      :type:  numpy.ndarray


   .. py:attribute:: y_np
      :type:  numpy.ndarray


   .. py:attribute:: uncovered
      :type:  set[int]


   .. py:attribute:: cache
      :type:  deeprules.cache.ConditionsCoverageCache


   .. py:attribute:: prediction_quality_metric
      :type:  Callable[[decision_rules.survival.SurvivalRuleSet, numpy.ndarray, numpy.ndarray, numpy.ndarray], float]


   .. py:attribute:: finished
      :type:  dict[str, bool]


   .. py:method:: clone() -> RuleSetGrowingContext


   .. py:method:: create_initial_context(X: pandas.DataFrame, y: pandas.DataFrame, params: deeprules.survival.mixed._params.AlgorithmParams, prediction_quality_metric: Callable[[numpy.ndarray, numpy.ndarray], float]) -> RuleSetGrowingContext
      :staticmethod:



.. py:class:: RuleSetGrowingResult

   .. py:attribute:: type
      :type:  str


   .. py:attribute:: ruleset
      :type:  decision_rules.survival.SurvivalRuleSet


   .. py:attribute:: prediction_quality
      :type:  float


   .. py:attribute:: context
      :type:  RuleSetGrowingContext


   .. py:attribute:: rule
      :type:  Optional[decision_rules.survival.SurvivalRule]
      :value: None



.. py:class:: RuleSetGrowingResults

   .. py:attribute:: carry_on
      :type:  bool


   .. py:attribute:: dnf
      :type:  Optional[RuleSetGrowingResult]
      :value: None



   .. py:attribute:: cnf
      :type:  Optional[RuleSetGrowingResult]
      :value: None



.. py:function:: _calculate_rules_coverages(ruleset: decision_rules.survival.SurvivalRuleSet, X_train: numpy.ndarray, y_train: numpy.ndarray, cache: deeprules.cache.ConditionsCoverageCache)

.. py:function:: _update_ruleset(ruleset: decision_rules.survival.SurvivalRuleSet, X_train: pandas.DataFrame, y_train: pandas.Series, cache: deeprules.cache.ConditionsCoverageCache)

.. py:class:: RuleSetGrower(original_result: RuleSetGrowingResult)

   .. py:attribute:: ruleset
      :type:  decision_rules.survival.SurvivalRuleSet


   .. py:attribute:: last_pred_quality
      :type:  float


   .. py:attribute:: initial_ctx
      :type:  RuleSetGrowingContext


   .. py:attribute:: cnf_ctx
      :type:  RuleSetGrowingContext


   .. py:attribute:: dnf_ctx
      :type:  RuleSetGrowingContext


   .. py:attribute:: params
      :type:  deeprules.survival.mixed._params.AlgorithmParams


   .. py:attribute:: cnf_params
      :type:  deeprules.survival.cnf._params.AlgorithmParams


   .. py:attribute:: dnf_params
      :type:  deeprules.survival.dnf._params.AlgorithmParams


   .. py:attribute:: y
      :type:  pandas.Series
      :value: None



   .. py:attribute:: cnf_inducer


   .. py:attribute:: dnf_inducer


   .. py:attribute:: cache
      :type:  deeprules.cache.ConditionsCoverageCache


   .. py:attribute:: logger
      :type:  logging.Logger


   .. py:method:: grow_single_rule() -> RuleSetGrowingResults

      Adds a single rule to the ruleset. It returns two new rulesets, which are
      the original ruleset with the new DNF and CNF rule added to it.

      Returns:
          RuleSetGrowingResults: object containing two grown rulesets and their
          qualities. Those rulesets are the original ruleset with the new DNF and
          CNF rule added to it.



   .. py:method:: prepare_result(choice: RuleChoice) -> Optional[RuleSetGrowingResult]


   .. py:method:: _induce_both_rules(dataset: tuple[pandas.DataFrame, pandas.Series], dataset_np: tuple[numpy.ndarray, numpy.ndarray]) -> RuleChoices


   .. py:method:: check_predictive_quality_on_ruleset_with_rule(ruleset: decision_rules.survival.SurvivalRuleSet, rule: decision_rules.survival.SurvivalRule, X: pandas.DataFrame, prediction_quality_metric: Callable[[decision_rules.survival.SurvivalRuleSet, numpy.ndarray, numpy.ndarray], float]) -> float


   .. py:method:: clone_ruleset(ruleset: decision_rules.survival.SurvivalRuleSet) -> decision_rules.survival.SurvivalRuleSet


