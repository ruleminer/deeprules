deeprules.survival.mixed
========================

.. py:module:: deeprules.survival.mixed

.. autoapi-nested-parse::

   Contains classes for induction of mixed DNF and CNF survival rules.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/deeprules/survival/mixed/_helpers/index
   /autoapi/deeprules/survival/mixed/_induction/index
   /autoapi/deeprules/survival/mixed/_model/index
   /autoapi/deeprules/survival/mixed/_params/index


Classes
-------

.. autoapisummary::

   deeprules.survival.mixed.Survival


Package Contents
----------------

.. py:class:: Survival(min_cov: int = DEFAULT_PARAMS_VALUES['min_cov'], max_uncovered_fraction: float = DEFAULT_PARAMS_VALUES['max_uncovered_fraction'], max_layers_count: int = DEFAULT_PARAMS_VALUES['max_layers_count'], max_component_length: int = 3, enable_pruning: bool = DEFAULT_PARAMS_VALUES['enable_pruning'], enable_attributes_conditions: bool = DEFAULT_PARAMS_VALUES['enable_attributes_conditions'], enable_negations: bool = DEFAULT_PARAMS_VALUES['enable_negations'], enable_discrete_set_conditions: bool = DEFAULT_PARAMS_VALUES['enable_discrete_set_conditions'], survival_time_attr: str = 'survival_time')

   Bases: :py:obj:`deeprules._model.BaseModel`


   Survival rules based on  Rules algorithm.


   .. py:attribute:: _Inducer


   .. py:attribute:: _problem_type


   .. py:attribute:: training_history
      :type:  pandas.DataFrame
      :value: None



   .. py:method:: fit(X: pandas.DataFrame, y: pandas.Series) -> decision_rules.survival.SurvivalRuleSet

      Trains a ruleset on given data.

      Args:
          X (pd.DataFrame): dataset
          y (pd.Series): label column

      Returns:
          AbstractRuleSet: trained ruleset instance from `decision_rules <https://github.com/ruleminer/decision-rules>`_ package.



